<%
  // Copyright 2013 Foursquare Labs Inc. All Rights Reserved.

  import io.fsq.spindle.codegen.runtime.ScalaField
%>
<%@ val field: ScalaField %>
#if (field.isForeignKey && field.renderType.isInstanceOf[io.fsq.spindle.codegen.runtime.Container1RenderType])
<% val elem = field.renderType.asInstanceOf[io.fsq.spindle.codegen.runtime.Container1RenderType].elem %>
  private var ${field.varName}ObjSeq: Seq[AnyRef] = null
  private var ${field.varName}AlternateObjSeq: Seq[AnyRef] = null
  override def ${field.name}Fks[R <: _root_.io.fsq.spindle.runtime.Record[R] with _root_.io.fsq.spindle.runtime.HasPrimaryKey[${elem.text}, R]](meta: _root_.io.fsq.spindle.runtime.MetaRecord[R, _]): Seq[R] = {
    if (${field.isSetName}) {
      if (${field.varName}ObjSeq != null) {
        ${field.varName}ObjSeq.flatMap(${field.varName}Obj => {
          val foreignOpt = meta.ifInstanceFrom(${field.varName}Obj)
          if (foreignOpt.isDefined) {
            val foreignObj = foreignOpt.get
            if (${field.name}OrThrow.contains(foreignObj.primaryKey)) {
              foreignOpt
            } else {
              _root_.io.fsq.spindle.runtime.RuntimeHelpers.fkHooks.mismatchedPrimaryKeySeq(this, this.meta.${field.escapedName}, meta, ${field.name}OrThrow, foreignObj)
            }
          } else {
            _root_.io.fsq.spindle.runtime.RuntimeHelpers.fkHooks.mismatchedInstanceTypeSeq(this, this.meta.${field.escapedName}, meta, ${field.name}OrThrow, ${field.varName}ObjSeq)
          }
        })
      } else {
        _root_.io.fsq.spindle.runtime.RuntimeHelpers.fkHooks.missingObjSeq(this, this.meta.${field.escapedName}, meta, ${field.name}OrThrow)
      }
    } else {
      _root_.io.fsq.spindle.runtime.RuntimeHelpers.fkHooks.missingKeySeq(this, this.meta.${field.escapedName}, meta)
    }
  }
  override def ${field.name}UntypedFks(meta: _root_.io.fsq.spindle.runtime.UntypedMetaRecord): Seq[_root_.io.fsq.spindle.runtime.UntypedRecord with _root_.io.fsq.spindle.runtime.SemitypedHasPrimaryKey[${elem.text}]] = {
    if (${field.varName}ObjSeq != null) {
      val ret = ${field.varName}ObjSeq.flatMap(${field.varName}Obj => {
        val foreignOpt = meta.untypedIfInstanceFrom(${field.varName}Obj).asInstanceOf[Option[_root_.io.fsq.spindle.runtime.UntypedRecord with _root_.io.fsq.spindle.runtime.SemitypedHasPrimaryKey[${elem.text}]]]
        if (${field.isSetName} && foreignOpt.isDefined && ${field.name}OrThrow.contains(foreignOpt.get.primaryKey)) {
          foreignOpt
        } else None
      })
      <% // TODO: This is me trying to generalize how impl_fk.ssp works, but I'm really not sure why anything gets unset. %>
      if (ret.size == ${field.varName}ObjSeq.size) {
        ret
      } else {
        ${field.varName}ObjSeq = null
        Nil
      }
    } else {
      Nil
    }
  }
  override def ${field.name}GetObj: Seq[_root_.io.fsq.spindle.runtime.SemitypedHasPrimaryKey[${elem.text}]] = {
    if (${field.varName}ObjSeq != null) {
      ${field.varName}ObjSeq.asInstanceOf[Seq[_root_.io.fsq.spindle.runtime.SemitypedHasPrimaryKey[${elem.text}]]]
    } else {
      Nil
    }
  }
  override def ${field.name}SetObj(x: Seq[_root_.io.fsq.spindle.runtime.SemitypedHasPrimaryKey[${elem.text}]]): Unit = {
    ${field.varName}ObjSeq = x
  }
  override def ${field.name}AlternateFks: Seq[AnyRef] = {
    if (${field.isSetName} && ${field.varName}AlternateObjSeq != null) {
      ${field.varName}AlternateObjSeq
    } else {
      _root_.io.fsq.spindle.runtime.RuntimeHelpers.fkHooks.missingAlternateObjSeq(this, this.meta.${field.escapedName}, ${field.name})
    }
  }
  override def ${field.name}SetAlternateObj(x: Seq[AnyRef]): Unit = {
    ${field.varName}AlternateObjSeq = x
  }
#end
