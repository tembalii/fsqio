//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
YahooWoeType = { 
'UNKNOWN' : 0
,'TOWN' : 7
,'ADMIN1' : 8
,'ADMIN2' : 9
,'ADMIN3' : 10
,'POSTAL_CODE' : 11
,'COUNTRY' : 12
,'ISLAND' : 13
,'AIRPORT' : 14
,'DRAINAGE' : 15
,'PARK' : 16
,'POI' : 20
,'SUBURB' : 22
,'SPORT' : 23
,'COLLOQUIAL' : 24
,'ZONE' : 25
,'HISTORICAL_STATE' : 26
,'HISTORICAL_COUNTY' : 27
,'CONTINENT' : 29
,'TIMEZONE' : 31
,'HISTORICAL_TOWN' : 35
,'STREET' : 100
}
FeatureNameFlags = { 
'PREFERRED' : 1
,'ABBREVIATION' : 2
,'DEACCENT' : 4
,'ALIAS' : 8
,'LOCAL_LANG' : 16
,'ALT_NAME' : 32
,'COLLOQUIAL' : 64
,'SHORT_NAME' : 128
,'NEVER_DISPLAY' : 256
,'LOW_QUALITY' : 512
,'HISTORIC' : 1024
}
GeocodeRelationType = { 
'PARENT' : 1
,'HIERARCHY' : 2
}
NeighborhoodType = { 
'MACRO' : 2
,'NEIGHBORHOOD' : 3
,'SUB' : 4
}
ResponseIncludes = { 
'EVERYTHING' : 0
,'PARENTS' : 1
,'ALL_NAMES' : 2
,'PARENT_ALL_NAMES' : 3
,'WKB_GEOMETRY' : 4
,'WKT_GEOMETRY' : 5
,'REVGEO_COVERAGE' : 6
,'DISPLAY_NAME' : 7
,'WKB_GEOMETRY_SIMPLIFIED' : 8
,'WKT_GEOMETRY_SIMPLIFIED' : 9
}
GeocodePoint = function(args){
this.lat = 0.0
this.lng = 0.0
if( args != null ){if (null != args.lat)
this.lat = args.lat
if (null != args.lng)
this.lng = args.lng
}}
GeocodePoint.prototype = {}
GeocodePoint.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
  var ret = input.readFieldBegin()
  var fname = ret.fname
  var ftype = ret.ftype
  var fid   = ret.fid
  if (ftype == Thrift.Type.STOP) 
    break
  switch(fid)
  {
    case 1:    if (ftype == Thrift.Type.DOUBLE) {
      var rtmp = input.readDouble()
this.lat = rtmp.value
    } else {
      input.skip(ftype)
    }
    break
    case 2:    if (ftype == Thrift.Type.DOUBLE) {
      var rtmp = input.readDouble()
this.lng = rtmp.value
    } else {
      input.skip(ftype)
    }
    break
    default:
      input.skip(ftype)
  }
  input.readFieldEnd()
}
input.readStructEnd()
return
}

GeocodePoint.prototype.write = function(output){ 
output.writeStructBegin('GeocodePoint')
if (null != this.lat) {
  output.writeFieldBegin('lat', Thrift.Type.DOUBLE, 1)
  output.writeDouble(this.lat)
  output.writeFieldEnd()
}
if (null != this.lng) {
  output.writeFieldBegin('lng', Thrift.Type.DOUBLE, 2)
  output.writeDouble(this.lng)
  output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

GeocodeBoundingBox = function(args){
this.ne = new GeocodePoint()
this.sw = new GeocodePoint()
if( args != null ){if (null != args.ne)
this.ne = args.ne
if (null != args.sw)
this.sw = args.sw
}}
GeocodeBoundingBox.prototype = {}
GeocodeBoundingBox.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
  break
switch(fid)
{
  case 1:  if (ftype == Thrift.Type.STRUCT) {
    this.ne = new GeocodePoint()
    this.ne.read(input)
  } else {
    input.skip(ftype)
  }
  break
  case 2:  if (ftype == Thrift.Type.STRUCT) {
    this.sw = new GeocodePoint()
    this.sw.read(input)
  } else {
    input.skip(ftype)
  }
  break
  default:
    input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

GeocodeBoundingBox.prototype.write = function(output){ 
output.writeStructBegin('GeocodeBoundingBox')
if (null != this.ne) {
output.writeFieldBegin('ne', Thrift.Type.STRUCT, 1)
this.ne.write(output)
output.writeFieldEnd()
}
if (null != this.sw) {
output.writeFieldBegin('sw', Thrift.Type.STRUCT, 2)
this.sw.write(output)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

FeatureId = function(args){
this.source = ''
this.id = ''
if( args != null ){if (null != args.source)
this.source = args.source
if (null != args.id)
this.id = args.id
}}
FeatureId.prototype = {}
FeatureId.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRING) {
  var rtmp = input.readString()
this.source = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRING) {
  var rtmp = input.readString()
this.id = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

FeatureId.prototype.write = function(output){ 
output.writeStructBegin('FeatureId')
if (null != this.source) {
output.writeFieldBegin('source', Thrift.Type.STRING, 1)
output.writeString(this.source)
output.writeFieldEnd()
}
if (null != this.id) {
output.writeFieldBegin('id', Thrift.Type.STRING, 2)
output.writeString(this.id)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

FeatureName = function(args){
this.name = ''
this.lang = ''
this.flags = []
this.highlightedName = ''
if( args != null ){if (null != args.name)
this.name = args.name
if (null != args.lang)
this.lang = args.lang
if (null != args.flags)
this.flags = args.flags
if (null != args.highlightedName)
this.highlightedName = args.highlightedName
}}
FeatureName.prototype = {}
FeatureName.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.name = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.lang = rtmp.value
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.LIST) {
{
  var _size0 = 0
  var rtmp3
  this.flags = []
  var _etype3 = 0
  rtmp3 = input.readListBegin()
  _etype3 = rtmp3.etype
  _size0 = rtmp3.size
  for (var _i4 = 0; _i4 < _size0; ++_i4)
  {
    var elem5 = null
    var rtmp = input.readI32()
elem5 = rtmp.value
    this.flags.push(elem5)
  }
  input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 4:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.highlightedName = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

FeatureName.prototype.write = function(output){ 
output.writeStructBegin('FeatureName')
if (null != this.name) {
output.writeFieldBegin('name', Thrift.Type.STRING, 1)
output.writeString(this.name)
output.writeFieldEnd()
}
if (null != this.lang) {
output.writeFieldBegin('lang', Thrift.Type.STRING, 2)
output.writeString(this.lang)
output.writeFieldEnd()
}
if (null != this.flags) {
output.writeFieldBegin('flags', Thrift.Type.LIST, 3)
{
output.writeListBegin(Thrift.Type.I32, this.flags.length)
{
for(var iter6 in this.flags)
{
  iter6=this.flags[iter6]
  output.writeI32(iter6)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.highlightedName) {
output.writeFieldBegin('highlightedName', Thrift.Type.STRING, 4)
output.writeString(this.highlightedName)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

FeatureGeometry = function(args){
this.center = new GeocodePoint()
this.bounds = new GeocodeBoundingBox()
this.wkbGeometry = ''
this.wktGeometry = ''
this.wkbGeometrySimplified = ''
this.wktGeometrySimplified = ''
this.displayBounds = new GeocodeBoundingBox()
if( args != null ){if (null != args.center)
this.center = args.center
if (null != args.bounds)
this.bounds = args.bounds
if (null != args.wkbGeometry)
this.wkbGeometry = args.wkbGeometry
if (null != args.wktGeometry)
this.wktGeometry = args.wktGeometry
if (null != args.wkbGeometrySimplified)
this.wkbGeometrySimplified = args.wkbGeometrySimplified
if (null != args.wktGeometrySimplified)
this.wktGeometrySimplified = args.wktGeometrySimplified
if (null != args.displayBounds)
this.displayBounds = args.displayBounds
}}
FeatureGeometry.prototype = {}
FeatureGeometry.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRUCT) {
this.center = new GeocodePoint()
this.center.read(input)
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRUCT) {
this.bounds = new GeocodeBoundingBox()
this.bounds.read(input)
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.wkbGeometry = rtmp.value
} else {
  input.skip(ftype)
}
break
case 4:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.wktGeometry = rtmp.value
} else {
  input.skip(ftype)
}
break
case 5:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.wkbGeometrySimplified = rtmp.value
} else {
  input.skip(ftype)
}
break
case 6:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.wktGeometrySimplified = rtmp.value
} else {
  input.skip(ftype)
}
break
case 7:if (ftype == Thrift.Type.STRUCT) {
this.displayBounds = new GeocodeBoundingBox()
this.displayBounds.read(input)
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

FeatureGeometry.prototype.write = function(output){ 
output.writeStructBegin('FeatureGeometry')
if (null != this.center) {
output.writeFieldBegin('center', Thrift.Type.STRUCT, 1)
this.center.write(output)
output.writeFieldEnd()
}
if (null != this.bounds) {
output.writeFieldBegin('bounds', Thrift.Type.STRUCT, 2)
this.bounds.write(output)
output.writeFieldEnd()
}
if (null != this.wkbGeometry) {
output.writeFieldBegin('wkbGeometry', Thrift.Type.STRING, 3)
output.writeString(this.wkbGeometry)
output.writeFieldEnd()
}
if (null != this.wktGeometry) {
output.writeFieldBegin('wktGeometry', Thrift.Type.STRING, 4)
output.writeString(this.wktGeometry)
output.writeFieldEnd()
}
if (null != this.wkbGeometrySimplified) {
output.writeFieldBegin('wkbGeometrySimplified', Thrift.Type.STRING, 5)
output.writeString(this.wkbGeometrySimplified)
output.writeFieldEnd()
}
if (null != this.wktGeometrySimplified) {
output.writeFieldBegin('wktGeometrySimplified', Thrift.Type.STRING, 6)
output.writeString(this.wktGeometrySimplified)
output.writeFieldEnd()
}
if (null != this.displayBounds) {
output.writeFieldBegin('displayBounds', Thrift.Type.STRUCT, 7)
this.displayBounds.write(output)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

GeocodeRelation = function(args){
this.relationType = 0
this.relatedId = ''
if( args != null ){if (null != args.relationType)
this.relationType = args.relationType
if (null != args.relatedId)
this.relatedId = args.relatedId
}}
GeocodeRelation.prototype = {}
GeocodeRelation.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.relationType = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.relatedId = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

GeocodeRelation.prototype.write = function(output){ 
output.writeStructBegin('GeocodeRelation')
if (null != this.relationType) {
output.writeFieldBegin('relationType', Thrift.Type.I32, 1)
output.writeI32(this.relationType)
output.writeFieldEnd()
}
if (null != this.relatedId) {
output.writeFieldBegin('relatedId', Thrift.Type.STRING, 2)
output.writeString(this.relatedId)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

GeocodeFeatureAttributes = function(args){
this.adm0cap = false
this.adm1cap = false
this.scalerank = 20
this.labelrank = 0
this.natscale = 0
this.population = 0
this.sociallyRelevant = false
this.neighborhoodType = 0
if( args != null ){if (null != args.adm0cap)
this.adm0cap = args.adm0cap
if (null != args.adm1cap)
this.adm1cap = args.adm1cap
if (null != args.scalerank)
this.scalerank = args.scalerank
if (null != args.labelrank)
this.labelrank = args.labelrank
if (null != args.natscale)
this.natscale = args.natscale
if (null != args.population)
this.population = args.population
if (null != args.sociallyRelevant)
this.sociallyRelevant = args.sociallyRelevant
if (null != args.neighborhoodType)
this.neighborhoodType = args.neighborhoodType
}}
GeocodeFeatureAttributes.prototype = {}
GeocodeFeatureAttributes.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.BOOL) {
var rtmp = input.readBool()
this.adm0cap = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.BOOL) {
var rtmp = input.readBool()
this.adm1cap = rtmp.value
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.scalerank = rtmp.value
} else {
  input.skip(ftype)
}
break
case 4:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.labelrank = rtmp.value
} else {
  input.skip(ftype)
}
break
case 5:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.natscale = rtmp.value
} else {
  input.skip(ftype)
}
break
case 6:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.population = rtmp.value
} else {
  input.skip(ftype)
}
break
case 7:if (ftype == Thrift.Type.BOOL) {
var rtmp = input.readBool()
this.sociallyRelevant = rtmp.value
} else {
  input.skip(ftype)
}
break
case 8:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.neighborhoodType = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

GeocodeFeatureAttributes.prototype.write = function(output){ 
output.writeStructBegin('GeocodeFeatureAttributes')
if (null != this.adm0cap) {
output.writeFieldBegin('adm0cap', Thrift.Type.BOOL, 1)
output.writeBool(this.adm0cap)
output.writeFieldEnd()
}
if (null != this.adm1cap) {
output.writeFieldBegin('adm1cap', Thrift.Type.BOOL, 2)
output.writeBool(this.adm1cap)
output.writeFieldEnd()
}
if (null != this.scalerank) {
output.writeFieldBegin('scalerank', Thrift.Type.I32, 3)
output.writeI32(this.scalerank)
output.writeFieldEnd()
}
if (null != this.labelrank) {
output.writeFieldBegin('labelrank', Thrift.Type.I32, 4)
output.writeI32(this.labelrank)
output.writeFieldEnd()
}
if (null != this.natscale) {
output.writeFieldBegin('natscale', Thrift.Type.I32, 5)
output.writeI32(this.natscale)
output.writeFieldEnd()
}
if (null != this.population) {
output.writeFieldBegin('population', Thrift.Type.I32, 6)
output.writeI32(this.population)
output.writeFieldEnd()
}
if (null != this.sociallyRelevant) {
output.writeFieldBegin('sociallyRelevant', Thrift.Type.BOOL, 7)
output.writeBool(this.sociallyRelevant)
output.writeFieldEnd()
}
if (null != this.neighborhoodType) {
output.writeFieldBegin('neighborhoodType', Thrift.Type.I32, 8)
output.writeI32(this.neighborhoodType)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

ScoringFeatures = function(args){
this.population = 0
this.boost = 0
this.parentIds = []
this.canGeocode = true
this.hasPoly = false
this.DEPRECATED_parents = []
if( args != null ){if (null != args.population)
this.population = args.population
if (null != args.boost)
this.boost = args.boost
if (null != args.parentIds)
this.parentIds = args.parentIds
if (null != args.canGeocode)
this.canGeocode = args.canGeocode
if (null != args.hasPoly)
this.hasPoly = args.hasPoly
if (null != args.DEPRECATED_parents)
this.DEPRECATED_parents = args.DEPRECATED_parents
}}
ScoringFeatures.prototype = {}
ScoringFeatures.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.population = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.boost = rtmp.value
} else {
  input.skip(ftype)
}
break
case 6:if (ftype == Thrift.Type.LIST) {
{
var _size7 = 0
var rtmp3
this.parentIds = []
var _etype10 = 0
rtmp3 = input.readListBegin()
_etype10 = rtmp3.etype
_size7 = rtmp3.size
for (var _i11 = 0; _i11 < _size7; ++_i11)
{
var elem12 = null
var rtmp = input.readI64()
elem12 = rtmp.value
this.parentIds.push(elem12)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 5:if (ftype == Thrift.Type.BOOL) {
var rtmp = input.readBool()
this.canGeocode = rtmp.value
} else {
  input.skip(ftype)
}
break
case 7:if (ftype == Thrift.Type.BOOL) {
var rtmp = input.readBool()
this.hasPoly = rtmp.value
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.LIST) {
{
var _size13 = 0
var rtmp3
this.DEPRECATED_parents = []
var _etype16 = 0
rtmp3 = input.readListBegin()
_etype16 = rtmp3.etype
_size13 = rtmp3.size
for (var _i17 = 0; _i17 < _size13; ++_i17)
{
var elem18 = null
var rtmp = input.readString()
elem18 = rtmp.value
this.DEPRECATED_parents.push(elem18)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

ScoringFeatures.prototype.write = function(output){ 
output.writeStructBegin('ScoringFeatures')
if (null != this.population) {
output.writeFieldBegin('population', Thrift.Type.I32, 1)
output.writeI32(this.population)
output.writeFieldEnd()
}
if (null != this.boost) {
output.writeFieldBegin('boost', Thrift.Type.I32, 2)
output.writeI32(this.boost)
output.writeFieldEnd()
}
if (null != this.parentIds) {
output.writeFieldBegin('parentIds', Thrift.Type.LIST, 6)
{
output.writeListBegin(Thrift.Type.I64, this.parentIds.length)
{
for(var iter19 in this.parentIds)
{
iter19=this.parentIds[iter19]
output.writeI64(iter19)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.canGeocode) {
output.writeFieldBegin('canGeocode', Thrift.Type.BOOL, 5)
output.writeBool(this.canGeocode)
output.writeFieldEnd()
}
if (null != this.hasPoly) {
output.writeFieldBegin('hasPoly', Thrift.Type.BOOL, 7)
output.writeBool(this.hasPoly)
output.writeFieldEnd()
}
if (null != this.DEPRECATED_parents) {
output.writeFieldBegin('DEPRECATED_parents', Thrift.Type.LIST, 3)
{
output.writeListBegin(Thrift.Type.STRING, this.DEPRECATED_parents.length)
{
for(var iter20 in this.DEPRECATED_parents)
{
iter20=this.DEPRECATED_parents[iter20]
output.writeString(iter20)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

GeocodeFeature = function(args){
this.cc = ''
this.geometry = new FeatureGeometry()
this.name = ''
this.displayName = ''
this.woeType = 0
this.ids = []
this.names = []
this.attribution = []
this.timezones = []
this.highlightedName = ''
this.matchedName = ''
this.slug = ''
this.id = ''
this.attributes = new GeocodeFeatureAttributes()
this.longId = 0
this.longIds = []
if( args != null ){if (null != args.cc)
this.cc = args.cc
if (null != args.geometry)
this.geometry = args.geometry
if (null != args.name)
this.name = args.name
if (null != args.displayName)
this.displayName = args.displayName
if (null != args.woeType)
this.woeType = args.woeType
if (null != args.ids)
this.ids = args.ids
if (null != args.names)
this.names = args.names
if (null != args.attribution)
this.attribution = args.attribution
if (null != args.timezones)
this.timezones = args.timezones
if (null != args.highlightedName)
this.highlightedName = args.highlightedName
if (null != args.matchedName)
this.matchedName = args.matchedName
if (null != args.slug)
this.slug = args.slug
if (null != args.id)
this.id = args.id
if (null != args.attributes)
this.attributes = args.attributes
if (null != args.longId)
this.longId = args.longId
if (null != args.longIds)
this.longIds = args.longIds
}}
GeocodeFeature.prototype = {}
GeocodeFeature.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.cc = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRUCT) {
this.geometry = new FeatureGeometry()
this.geometry.read(input)
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.name = rtmp.value
} else {
  input.skip(ftype)
}
break
case 4:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.displayName = rtmp.value
} else {
  input.skip(ftype)
}
break
case 5:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.woeType = rtmp.value
} else {
  input.skip(ftype)
}
break
case 6:if (ftype == Thrift.Type.LIST) {
{
var _size21 = 0
var rtmp3
this.ids = []
var _etype24 = 0
rtmp3 = input.readListBegin()
_etype24 = rtmp3.etype
_size21 = rtmp3.size
for (var _i25 = 0; _i25 < _size21; ++_i25)
{
var elem26 = null
elem26 = new FeatureId()
elem26.read(input)
this.ids.push(elem26)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 7:if (ftype == Thrift.Type.LIST) {
{
var _size27 = 0
var rtmp3
this.names = []
var _etype30 = 0
rtmp3 = input.readListBegin()
_etype30 = rtmp3.etype
_size27 = rtmp3.size
for (var _i31 = 0; _i31 < _size27; ++_i31)
{
var elem32 = null
elem32 = new FeatureName()
elem32.read(input)
this.names.push(elem32)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 8:if (ftype == Thrift.Type.LIST) {
{
var _size33 = 0
var rtmp3
this.attribution = []
var _etype36 = 0
rtmp3 = input.readListBegin()
_etype36 = rtmp3.etype
_size33 = rtmp3.size
for (var _i37 = 0; _i37 < _size33; ++_i37)
{
var elem38 = null
var rtmp = input.readString()
elem38 = rtmp.value
this.attribution.push(elem38)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 9:if (ftype == Thrift.Type.LIST) {
{
var _size39 = 0
var rtmp3
this.timezones = []
var _etype42 = 0
rtmp3 = input.readListBegin()
_etype42 = rtmp3.etype
_size39 = rtmp3.size
for (var _i43 = 0; _i43 < _size39; ++_i43)
{
var elem44 = null
var rtmp = input.readString()
elem44 = rtmp.value
this.timezones.push(elem44)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 11:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.highlightedName = rtmp.value
} else {
  input.skip(ftype)
}
break
case 12:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.matchedName = rtmp.value
} else {
  input.skip(ftype)
}
break
case 13:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.slug = rtmp.value
} else {
  input.skip(ftype)
}
break
case 14:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.id = rtmp.value
} else {
  input.skip(ftype)
}
break
case 15:if (ftype == Thrift.Type.STRUCT) {
this.attributes = new GeocodeFeatureAttributes()
this.attributes.read(input)
} else {
  input.skip(ftype)
}
break
case 16:if (ftype == Thrift.Type.I64) {
var rtmp = input.readI64()
this.longId = rtmp.value
} else {
  input.skip(ftype)
}
break
case 17:if (ftype == Thrift.Type.LIST) {
{
var _size45 = 0
var rtmp3
this.longIds = []
var _etype48 = 0
rtmp3 = input.readListBegin()
_etype48 = rtmp3.etype
_size45 = rtmp3.size
for (var _i49 = 0; _i49 < _size45; ++_i49)
{
var elem50 = null
var rtmp = input.readI64()
elem50 = rtmp.value
this.longIds.push(elem50)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

GeocodeFeature.prototype.write = function(output){ 
output.writeStructBegin('GeocodeFeature')
if (null != this.cc) {
output.writeFieldBegin('cc', Thrift.Type.STRING, 1)
output.writeString(this.cc)
output.writeFieldEnd()
}
if (null != this.geometry) {
output.writeFieldBegin('geometry', Thrift.Type.STRUCT, 2)
this.geometry.write(output)
output.writeFieldEnd()
}
if (null != this.name) {
output.writeFieldBegin('name', Thrift.Type.STRING, 3)
output.writeString(this.name)
output.writeFieldEnd()
}
if (null != this.displayName) {
output.writeFieldBegin('displayName', Thrift.Type.STRING, 4)
output.writeString(this.displayName)
output.writeFieldEnd()
}
if (null != this.woeType) {
output.writeFieldBegin('woeType', Thrift.Type.I32, 5)
output.writeI32(this.woeType)
output.writeFieldEnd()
}
if (null != this.ids) {
output.writeFieldBegin('ids', Thrift.Type.LIST, 6)
{
output.writeListBegin(Thrift.Type.STRUCT, this.ids.length)
{
for(var iter51 in this.ids)
{
iter51=this.ids[iter51]
iter51.write(output)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.names) {
output.writeFieldBegin('names', Thrift.Type.LIST, 7)
{
output.writeListBegin(Thrift.Type.STRUCT, this.names.length)
{
for(var iter52 in this.names)
{
iter52=this.names[iter52]
iter52.write(output)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.attribution) {
output.writeFieldBegin('attribution', Thrift.Type.LIST, 8)
{
output.writeListBegin(Thrift.Type.STRING, this.attribution.length)
{
for(var iter53 in this.attribution)
{
iter53=this.attribution[iter53]
output.writeString(iter53)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.timezones) {
output.writeFieldBegin('timezones', Thrift.Type.LIST, 9)
{
output.writeListBegin(Thrift.Type.STRING, this.timezones.length)
{
for(var iter54 in this.timezones)
{
iter54=this.timezones[iter54]
output.writeString(iter54)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.highlightedName) {
output.writeFieldBegin('highlightedName', Thrift.Type.STRING, 11)
output.writeString(this.highlightedName)
output.writeFieldEnd()
}
if (null != this.matchedName) {
output.writeFieldBegin('matchedName', Thrift.Type.STRING, 12)
output.writeString(this.matchedName)
output.writeFieldEnd()
}
if (null != this.slug) {
output.writeFieldBegin('slug', Thrift.Type.STRING, 13)
output.writeString(this.slug)
output.writeFieldEnd()
}
if (null != this.id) {
output.writeFieldBegin('id', Thrift.Type.STRING, 14)
output.writeString(this.id)
output.writeFieldEnd()
}
if (null != this.attributes) {
output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 15)
this.attributes.write(output)
output.writeFieldEnd()
}
if (null != this.longId) {
output.writeFieldBegin('longId', Thrift.Type.I64, 16)
output.writeI64(this.longId)
output.writeFieldEnd()
}
if (null != this.longIds) {
output.writeFieldBegin('longIds', Thrift.Type.LIST, 17)
{
output.writeListBegin(Thrift.Type.I64, this.longIds.length)
{
for(var iter55 in this.longIds)
{
iter55=this.longIds[iter55]
output.writeI64(iter55)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

GeocodeServingFeature = function(args){
this.longId = 0
this.scoringFeatures = new ScoringFeatures()
this.feature = new GeocodeFeature()
this.parents = []
this.DEPRECATED_id = ''
if( args != null ){if (null != args.longId)
this.longId = args.longId
if (null != args.scoringFeatures)
this.scoringFeatures = args.scoringFeatures
if (null != args.feature)
this.feature = args.feature
if (null != args.parents)
this.parents = args.parents
if (null != args.DEPRECATED_id)
this.DEPRECATED_id = args.DEPRECATED_id
}}
GeocodeServingFeature.prototype = {}
GeocodeServingFeature.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 5:if (ftype == Thrift.Type.I64) {
var rtmp = input.readI64()
this.longId = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRUCT) {
this.scoringFeatures = new ScoringFeatures()
this.scoringFeatures.read(input)
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.STRUCT) {
this.feature = new GeocodeFeature()
this.feature.read(input)
} else {
  input.skip(ftype)
}
break
case 4:if (ftype == Thrift.Type.LIST) {
{
var _size56 = 0
var rtmp3
this.parents = []
var _etype59 = 0
rtmp3 = input.readListBegin()
_etype59 = rtmp3.etype
_size56 = rtmp3.size
for (var _i60 = 0; _i60 < _size56; ++_i60)
{
var elem61 = null
elem61 = new GeocodeFeature()
elem61.read(input)
this.parents.push(elem61)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 1:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.DEPRECATED_id = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

GeocodeServingFeature.prototype.write = function(output){ 
output.writeStructBegin('GeocodeServingFeature')
if (null != this.longId) {
output.writeFieldBegin('longId', Thrift.Type.I64, 5)
output.writeI64(this.longId)
output.writeFieldEnd()
}
if (null != this.scoringFeatures) {
output.writeFieldBegin('scoringFeatures', Thrift.Type.STRUCT, 2)
this.scoringFeatures.write(output)
output.writeFieldEnd()
}
if (null != this.feature) {
output.writeFieldBegin('feature', Thrift.Type.STRUCT, 3)
this.feature.write(output)
output.writeFieldEnd()
}
if (null != this.parents) {
output.writeFieldBegin('parents', Thrift.Type.LIST, 4)
{
output.writeListBegin(Thrift.Type.STRUCT, this.parents.length)
{
for(var iter62 in this.parents)
{
iter62=this.parents[iter62]
iter62.write(output)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.DEPRECATED_id) {
output.writeFieldBegin('DEPRECATED_id', Thrift.Type.STRING, 1)
output.writeString(this.DEPRECATED_id)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

InterpretationScoringFeatures = function(args){
this.percentOfRequestCovered = 0
this.percentOfFeatureCovered = 0
if( args != null ){if (null != args.percentOfRequestCovered)
this.percentOfRequestCovered = args.percentOfRequestCovered
if (null != args.percentOfFeatureCovered)
this.percentOfFeatureCovered = args.percentOfFeatureCovered
}}
InterpretationScoringFeatures.prototype = {}
InterpretationScoringFeatures.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 2:if (ftype == Thrift.Type.DOUBLE) {
var rtmp = input.readDouble()
this.percentOfRequestCovered = rtmp.value
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.DOUBLE) {
var rtmp = input.readDouble()
this.percentOfFeatureCovered = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

InterpretationScoringFeatures.prototype.write = function(output){ 
output.writeStructBegin('InterpretationScoringFeatures')
if (null != this.percentOfRequestCovered) {
output.writeFieldBegin('percentOfRequestCovered', Thrift.Type.DOUBLE, 2)
output.writeDouble(this.percentOfRequestCovered)
output.writeFieldEnd()
}
if (null != this.percentOfFeatureCovered) {
output.writeFieldBegin('percentOfFeatureCovered', Thrift.Type.DOUBLE, 3)
output.writeDouble(this.percentOfFeatureCovered)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

DebugScoreComponent = function(args){
this.key = ''
this.value = 0
if( args != null ){if (null != args.key)
this.key = args.key
if (null != args.value)
this.value = args.value
}}
DebugScoreComponent.prototype = {}
DebugScoreComponent.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.key = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.value = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

DebugScoreComponent.prototype.write = function(output){ 
output.writeStructBegin('DebugScoreComponent')
if (null != this.key) {
output.writeFieldBegin('key', Thrift.Type.STRING, 1)
output.writeString(this.key)
output.writeFieldEnd()
}
if (null != this.value) {
output.writeFieldBegin('value', Thrift.Type.I32, 2)
output.writeI32(this.value)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

InterpretationDebugInfo = function(args){
this.scoreComponents = []
this.finalScore = 0
if( args != null ){if (null != args.scoreComponents)
this.scoreComponents = args.scoreComponents
if (null != args.finalScore)
this.finalScore = args.finalScore
}}
InterpretationDebugInfo.prototype = {}
InterpretationDebugInfo.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.LIST) {
{
var _size63 = 0
var rtmp3
this.scoreComponents = []
var _etype66 = 0
rtmp3 = input.readListBegin()
_etype66 = rtmp3.etype
_size63 = rtmp3.size
for (var _i67 = 0; _i67 < _size63; ++_i67)
{
var elem68 = null
elem68 = new DebugScoreComponent()
elem68.read(input)
this.scoreComponents.push(elem68)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.finalScore = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

InterpretationDebugInfo.prototype.write = function(output){ 
output.writeStructBegin('InterpretationDebugInfo')
if (null != this.scoreComponents) {
output.writeFieldBegin('scoreComponents', Thrift.Type.LIST, 1)
{
output.writeListBegin(Thrift.Type.STRUCT, this.scoreComponents.length)
{
for(var iter69 in this.scoreComponents)
{
iter69=this.scoreComponents[iter69]
iter69.write(output)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.finalScore) {
output.writeFieldBegin('finalScore', Thrift.Type.I32, 2)
output.writeI32(this.finalScore)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

GeocodeInterpretation = function(args){
this.what = ''
this.where = ''
this.feature = new GeocodeFeature()
this.parents = []
this.scoringFeatures_DEPRECATED = new ScoringFeatures()
this.scores = new InterpretationScoringFeatures()
this.debugInfo = new InterpretationDebugInfo()
this.parentLongIds = []
if( args != null ){if (null != args.what)
this.what = args.what
if (null != args.where)
this.where = args.where
if (null != args.feature)
this.feature = args.feature
if (null != args.parents)
this.parents = args.parents
if (null != args.scoringFeatures_DEPRECATED)
this.scoringFeatures_DEPRECATED = args.scoringFeatures_DEPRECATED
if (null != args.scores)
this.scores = args.scores
if (null != args.debugInfo)
this.debugInfo = args.debugInfo
if (null != args.parentLongIds)
this.parentLongIds = args.parentLongIds
}}
GeocodeInterpretation.prototype = {}
GeocodeInterpretation.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.what = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.where = rtmp.value
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.STRUCT) {
this.feature = new GeocodeFeature()
this.feature.read(input)
} else {
  input.skip(ftype)
}
break
case 4:if (ftype == Thrift.Type.LIST) {
{
var _size70 = 0
var rtmp3
this.parents = []
var _etype73 = 0
rtmp3 = input.readListBegin()
_etype73 = rtmp3.etype
_size70 = rtmp3.size
for (var _i74 = 0; _i74 < _size70; ++_i74)
{
var elem75 = null
elem75 = new GeocodeFeature()
elem75.read(input)
this.parents.push(elem75)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 5:if (ftype == Thrift.Type.STRUCT) {
this.scoringFeatures_DEPRECATED = new ScoringFeatures()
this.scoringFeatures_DEPRECATED.read(input)
} else {
  input.skip(ftype)
}
break
case 6:if (ftype == Thrift.Type.STRUCT) {
this.scores = new InterpretationScoringFeatures()
this.scores.read(input)
} else {
  input.skip(ftype)
}
break
case 7:if (ftype == Thrift.Type.STRUCT) {
this.debugInfo = new InterpretationDebugInfo()
this.debugInfo.read(input)
} else {
  input.skip(ftype)
}
break
case 8:if (ftype == Thrift.Type.LIST) {
{
var _size76 = 0
var rtmp3
this.parentLongIds = []
var _etype79 = 0
rtmp3 = input.readListBegin()
_etype79 = rtmp3.etype
_size76 = rtmp3.size
for (var _i80 = 0; _i80 < _size76; ++_i80)
{
var elem81 = null
var rtmp = input.readI64()
elem81 = rtmp.value
this.parentLongIds.push(elem81)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

GeocodeInterpretation.prototype.write = function(output){ 
output.writeStructBegin('GeocodeInterpretation')
if (null != this.what) {
output.writeFieldBegin('what', Thrift.Type.STRING, 1)
output.writeString(this.what)
output.writeFieldEnd()
}
if (null != this.where) {
output.writeFieldBegin('where', Thrift.Type.STRING, 2)
output.writeString(this.where)
output.writeFieldEnd()
}
if (null != this.feature) {
output.writeFieldBegin('feature', Thrift.Type.STRUCT, 3)
this.feature.write(output)
output.writeFieldEnd()
}
if (null != this.parents) {
output.writeFieldBegin('parents', Thrift.Type.LIST, 4)
{
output.writeListBegin(Thrift.Type.STRUCT, this.parents.length)
{
for(var iter82 in this.parents)
{
iter82=this.parents[iter82]
iter82.write(output)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.scoringFeatures_DEPRECATED) {
output.writeFieldBegin('scoringFeatures_DEPRECATED', Thrift.Type.STRUCT, 5)
this.scoringFeatures_DEPRECATED.write(output)
output.writeFieldEnd()
}
if (null != this.scores) {
output.writeFieldBegin('scores', Thrift.Type.STRUCT, 6)
this.scores.write(output)
output.writeFieldEnd()
}
if (null != this.debugInfo) {
output.writeFieldBegin('debugInfo', Thrift.Type.STRUCT, 7)
this.debugInfo.write(output)
output.writeFieldEnd()
}
if (null != this.parentLongIds) {
output.writeFieldBegin('parentLongIds', Thrift.Type.LIST, 8)
{
output.writeListBegin(Thrift.Type.I64, this.parentLongIds.length)
{
for(var iter83 in this.parentLongIds)
{
iter83=this.parentLongIds[iter83]
output.writeI64(iter83)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

GeocodeResponse = function(args){
this.interpretations = []
this.debugLines = []
this.requestWktGeometry = ''
if( args != null ){if (null != args.interpretations)
this.interpretations = args.interpretations
if (null != args.debugLines)
this.debugLines = args.debugLines
if (null != args.requestWktGeometry)
this.requestWktGeometry = args.requestWktGeometry
}}
GeocodeResponse.prototype = {}
GeocodeResponse.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.LIST) {
{
var _size84 = 0
var rtmp3
this.interpretations = []
var _etype87 = 0
rtmp3 = input.readListBegin()
_etype87 = rtmp3.etype
_size84 = rtmp3.size
for (var _i88 = 0; _i88 < _size84; ++_i88)
{
var elem89 = null
elem89 = new GeocodeInterpretation()
elem89.read(input)
this.interpretations.push(elem89)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.LIST) {
{
var _size90 = 0
var rtmp3
this.debugLines = []
var _etype93 = 0
rtmp3 = input.readListBegin()
_etype93 = rtmp3.etype
_size90 = rtmp3.size
for (var _i94 = 0; _i94 < _size90; ++_i94)
{
var elem95 = null
var rtmp = input.readString()
elem95 = rtmp.value
this.debugLines.push(elem95)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.requestWktGeometry = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

GeocodeResponse.prototype.write = function(output){ 
output.writeStructBegin('GeocodeResponse')
if (null != this.interpretations) {
output.writeFieldBegin('interpretations', Thrift.Type.LIST, 1)
{
output.writeListBegin(Thrift.Type.STRUCT, this.interpretations.length)
{
for(var iter96 in this.interpretations)
{
iter96=this.interpretations[iter96]
iter96.write(output)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.debugLines) {
output.writeFieldBegin('debugLines', Thrift.Type.LIST, 2)
{
output.writeListBegin(Thrift.Type.STRING, this.debugLines.length)
{
for(var iter97 in this.debugLines)
{
iter97=this.debugLines[iter97]
output.writeString(iter97)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.requestWktGeometry) {
output.writeFieldBegin('requestWktGeometry', Thrift.Type.STRING, 3)
output.writeString(this.requestWktGeometry)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

GeocodeRequest = function(args){
this.query = ''
this.cc = ''
this.lang = 'en'
this.ll = new GeocodePoint()
this.full_DEPRECATED = false
this.debug = 0
this.autocomplete = false
this.woeHint = []
this.woeRestrict = []
this.bounds = new GeocodeBoundingBox()
this.slug = ''
this.includePolygon_DEPRECATED = false
this.radius = 0
this.maxInterpretations = 0
this.allowedSources = []
this.responseIncludes = []
if( args != null ){if (null != args.query)
this.query = args.query
if (null != args.cc)
this.cc = args.cc
if (null != args.lang)
this.lang = args.lang
if (null != args.ll)
this.ll = args.ll
if (null != args.full_DEPRECATED)
this.full_DEPRECATED = args.full_DEPRECATED
if (null != args.debug)
this.debug = args.debug
if (null != args.autocomplete)
this.autocomplete = args.autocomplete
if (null != args.woeHint)
this.woeHint = args.woeHint
if (null != args.woeRestrict)
this.woeRestrict = args.woeRestrict
if (null != args.bounds)
this.bounds = args.bounds
if (null != args.slug)
this.slug = args.slug
if (null != args.includePolygon_DEPRECATED)
this.includePolygon_DEPRECATED = args.includePolygon_DEPRECATED
if (null != args.radius)
this.radius = args.radius
if (null != args.maxInterpretations)
this.maxInterpretations = args.maxInterpretations
if (null != args.allowedSources)
this.allowedSources = args.allowedSources
if (null != args.responseIncludes)
this.responseIncludes = args.responseIncludes
}}
GeocodeRequest.prototype = {}
GeocodeRequest.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.query = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.cc = rtmp.value
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.lang = rtmp.value
} else {
  input.skip(ftype)
}
break
case 4:if (ftype == Thrift.Type.STRUCT) {
this.ll = new GeocodePoint()
this.ll.read(input)
} else {
  input.skip(ftype)
}
break
case 5:if (ftype == Thrift.Type.BOOL) {
var rtmp = input.readBool()
this.full_DEPRECATED = rtmp.value
} else {
  input.skip(ftype)
}
break
case 6:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.debug = rtmp.value
} else {
  input.skip(ftype)
}
break
case 7:if (ftype == Thrift.Type.BOOL) {
var rtmp = input.readBool()
this.autocomplete = rtmp.value
} else {
  input.skip(ftype)
}
break
case 8:if (ftype == Thrift.Type.LIST) {
{
var _size98 = 0
var rtmp3
this.woeHint = []
var _etype101 = 0
rtmp3 = input.readListBegin()
_etype101 = rtmp3.etype
_size98 = rtmp3.size
for (var _i102 = 0; _i102 < _size98; ++_i102)
{
var elem103 = null
var rtmp = input.readI32()
elem103 = rtmp.value
this.woeHint.push(elem103)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 9:if (ftype == Thrift.Type.LIST) {
{
var _size104 = 0
var rtmp3
this.woeRestrict = []
var _etype107 = 0
rtmp3 = input.readListBegin()
_etype107 = rtmp3.etype
_size104 = rtmp3.size
for (var _i108 = 0; _i108 < _size104; ++_i108)
{
var elem109 = null
var rtmp = input.readI32()
elem109 = rtmp.value
this.woeRestrict.push(elem109)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 10:if (ftype == Thrift.Type.STRUCT) {
this.bounds = new GeocodeBoundingBox()
this.bounds.read(input)
} else {
  input.skip(ftype)
}
break
case 11:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.slug = rtmp.value
} else {
  input.skip(ftype)
}
break
case 12:if (ftype == Thrift.Type.BOOL) {
var rtmp = input.readBool()
this.includePolygon_DEPRECATED = rtmp.value
} else {
  input.skip(ftype)
}
break
case 14:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.radius = rtmp.value
} else {
  input.skip(ftype)
}
break
case 16:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.maxInterpretations = rtmp.value
} else {
  input.skip(ftype)
}
break
case 17:if (ftype == Thrift.Type.LIST) {
{
var _size110 = 0
var rtmp3
this.allowedSources = []
var _etype113 = 0
rtmp3 = input.readListBegin()
_etype113 = rtmp3.etype
_size110 = rtmp3.size
for (var _i114 = 0; _i114 < _size110; ++_i114)
{
var elem115 = null
var rtmp = input.readString()
elem115 = rtmp.value
this.allowedSources.push(elem115)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 18:if (ftype == Thrift.Type.LIST) {
{
var _size116 = 0
var rtmp3
this.responseIncludes = []
var _etype119 = 0
rtmp3 = input.readListBegin()
_etype119 = rtmp3.etype
_size116 = rtmp3.size
for (var _i120 = 0; _i120 < _size116; ++_i120)
{
var elem121 = null
var rtmp = input.readI32()
elem121 = rtmp.value
this.responseIncludes.push(elem121)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

GeocodeRequest.prototype.write = function(output){ 
output.writeStructBegin('GeocodeRequest')
if (null != this.query) {
output.writeFieldBegin('query', Thrift.Type.STRING, 1)
output.writeString(this.query)
output.writeFieldEnd()
}
if (null != this.cc) {
output.writeFieldBegin('cc', Thrift.Type.STRING, 2)
output.writeString(this.cc)
output.writeFieldEnd()
}
if (null != this.lang) {
output.writeFieldBegin('lang', Thrift.Type.STRING, 3)
output.writeString(this.lang)
output.writeFieldEnd()
}
if (null != this.ll) {
output.writeFieldBegin('ll', Thrift.Type.STRUCT, 4)
this.ll.write(output)
output.writeFieldEnd()
}
if (null != this.full_DEPRECATED) {
output.writeFieldBegin('full_DEPRECATED', Thrift.Type.BOOL, 5)
output.writeBool(this.full_DEPRECATED)
output.writeFieldEnd()
}
if (null != this.debug) {
output.writeFieldBegin('debug', Thrift.Type.I32, 6)
output.writeI32(this.debug)
output.writeFieldEnd()
}
if (null != this.autocomplete) {
output.writeFieldBegin('autocomplete', Thrift.Type.BOOL, 7)
output.writeBool(this.autocomplete)
output.writeFieldEnd()
}
if (null != this.woeHint) {
output.writeFieldBegin('woeHint', Thrift.Type.LIST, 8)
{
output.writeListBegin(Thrift.Type.I32, this.woeHint.length)
{
for(var iter122 in this.woeHint)
{
iter122=this.woeHint[iter122]
output.writeI32(iter122)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.woeRestrict) {
output.writeFieldBegin('woeRestrict', Thrift.Type.LIST, 9)
{
output.writeListBegin(Thrift.Type.I32, this.woeRestrict.length)
{
for(var iter123 in this.woeRestrict)
{
iter123=this.woeRestrict[iter123]
output.writeI32(iter123)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.bounds) {
output.writeFieldBegin('bounds', Thrift.Type.STRUCT, 10)
this.bounds.write(output)
output.writeFieldEnd()
}
if (null != this.slug) {
output.writeFieldBegin('slug', Thrift.Type.STRING, 11)
output.writeString(this.slug)
output.writeFieldEnd()
}
if (null != this.includePolygon_DEPRECATED) {
output.writeFieldBegin('includePolygon_DEPRECATED', Thrift.Type.BOOL, 12)
output.writeBool(this.includePolygon_DEPRECATED)
output.writeFieldEnd()
}
if (null != this.radius) {
output.writeFieldBegin('radius', Thrift.Type.I32, 14)
output.writeI32(this.radius)
output.writeFieldEnd()
}
if (null != this.maxInterpretations) {
output.writeFieldBegin('maxInterpretations', Thrift.Type.I32, 16)
output.writeI32(this.maxInterpretations)
output.writeFieldEnd()
}
if (null != this.allowedSources) {
output.writeFieldBegin('allowedSources', Thrift.Type.LIST, 17)
{
output.writeListBegin(Thrift.Type.STRING, this.allowedSources.length)
{
for(var iter124 in this.allowedSources)
{
iter124=this.allowedSources[iter124]
output.writeString(iter124)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.responseIncludes) {
output.writeFieldBegin('responseIncludes', Thrift.Type.LIST, 18)
{
output.writeListBegin(Thrift.Type.I32, this.responseIncludes.length)
{
for(var iter125 in this.responseIncludes)
{
iter125=this.responseIncludes[iter125]
output.writeI32(iter125)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

CommonGeocodeRequestParams = function(args){
this.debug = 0
this.woeHint = []
this.woeRestrict = []
this.cc = ''
this.lang = 'en'
this.responseIncludes = []
this.allowedSources = []
this.llHint = new GeocodePoint()
this.bounds = new GeocodeBoundingBox()
this.maxInterpretations = 0
if( args != null ){if (null != args.debug)
this.debug = args.debug
if (null != args.woeHint)
this.woeHint = args.woeHint
if (null != args.woeRestrict)
this.woeRestrict = args.woeRestrict
if (null != args.cc)
this.cc = args.cc
if (null != args.lang)
this.lang = args.lang
if (null != args.responseIncludes)
this.responseIncludes = args.responseIncludes
if (null != args.allowedSources)
this.allowedSources = args.allowedSources
if (null != args.llHint)
this.llHint = args.llHint
if (null != args.bounds)
this.bounds = args.bounds
if (null != args.maxInterpretations)
this.maxInterpretations = args.maxInterpretations
}}
CommonGeocodeRequestParams.prototype = {}
CommonGeocodeRequestParams.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.debug = rtmp.value
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.LIST) {
{
var _size126 = 0
var rtmp3
this.woeHint = []
var _etype129 = 0
rtmp3 = input.readListBegin()
_etype129 = rtmp3.etype
_size126 = rtmp3.size
for (var _i130 = 0; _i130 < _size126; ++_i130)
{
var elem131 = null
var rtmp = input.readI32()
elem131 = rtmp.value
this.woeHint.push(elem131)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.LIST) {
{
var _size132 = 0
var rtmp3
this.woeRestrict = []
var _etype135 = 0
rtmp3 = input.readListBegin()
_etype135 = rtmp3.etype
_size132 = rtmp3.size
for (var _i136 = 0; _i136 < _size132; ++_i136)
{
var elem137 = null
var rtmp = input.readI32()
elem137 = rtmp.value
this.woeRestrict.push(elem137)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 4:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.cc = rtmp.value
} else {
  input.skip(ftype)
}
break
case 5:if (ftype == Thrift.Type.STRING) {
var rtmp = input.readString()
this.lang = rtmp.value
} else {
  input.skip(ftype)
}
break
case 6:if (ftype == Thrift.Type.LIST) {
{
var _size138 = 0
var rtmp3
this.responseIncludes = []
var _etype141 = 0
rtmp3 = input.readListBegin()
_etype141 = rtmp3.etype
_size138 = rtmp3.size
for (var _i142 = 0; _i142 < _size138; ++_i142)
{
var elem143 = null
var rtmp = input.readI32()
elem143 = rtmp.value
this.responseIncludes.push(elem143)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 7:if (ftype == Thrift.Type.LIST) {
{
var _size144 = 0
var rtmp3
this.allowedSources = []
var _etype147 = 0
rtmp3 = input.readListBegin()
_etype147 = rtmp3.etype
_size144 = rtmp3.size
for (var _i148 = 0; _i148 < _size144; ++_i148)
{
var elem149 = null
var rtmp = input.readString()
elem149 = rtmp.value
this.allowedSources.push(elem149)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 8:if (ftype == Thrift.Type.STRUCT) {
this.llHint = new GeocodePoint()
this.llHint.read(input)
} else {
  input.skip(ftype)
}
break
case 9:if (ftype == Thrift.Type.STRUCT) {
this.bounds = new GeocodeBoundingBox()
this.bounds.read(input)
} else {
  input.skip(ftype)
}
break
case 10:if (ftype == Thrift.Type.I32) {
var rtmp = input.readI32()
this.maxInterpretations = rtmp.value
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

CommonGeocodeRequestParams.prototype.write = function(output){ 
output.writeStructBegin('CommonGeocodeRequestParams')
if (null != this.debug) {
output.writeFieldBegin('debug', Thrift.Type.I32, 1)
output.writeI32(this.debug)
output.writeFieldEnd()
}
if (null != this.woeHint) {
output.writeFieldBegin('woeHint', Thrift.Type.LIST, 2)
{
output.writeListBegin(Thrift.Type.I32, this.woeHint.length)
{
for(var iter150 in this.woeHint)
{
iter150=this.woeHint[iter150]
output.writeI32(iter150)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.woeRestrict) {
output.writeFieldBegin('woeRestrict', Thrift.Type.LIST, 3)
{
output.writeListBegin(Thrift.Type.I32, this.woeRestrict.length)
{
for(var iter151 in this.woeRestrict)
{
iter151=this.woeRestrict[iter151]
output.writeI32(iter151)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.cc) {
output.writeFieldBegin('cc', Thrift.Type.STRING, 4)
output.writeString(this.cc)
output.writeFieldEnd()
}
if (null != this.lang) {
output.writeFieldBegin('lang', Thrift.Type.STRING, 5)
output.writeString(this.lang)
output.writeFieldEnd()
}
if (null != this.responseIncludes) {
output.writeFieldBegin('responseIncludes', Thrift.Type.LIST, 6)
{
output.writeListBegin(Thrift.Type.I32, this.responseIncludes.length)
{
for(var iter152 in this.responseIncludes)
{
iter152=this.responseIncludes[iter152]
output.writeI32(iter152)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.allowedSources) {
output.writeFieldBegin('allowedSources', Thrift.Type.LIST, 7)
{
output.writeListBegin(Thrift.Type.STRING, this.allowedSources.length)
{
for(var iter153 in this.allowedSources)
{
iter153=this.allowedSources[iter153]
output.writeString(iter153)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.llHint) {
output.writeFieldBegin('llHint', Thrift.Type.STRUCT, 8)
this.llHint.write(output)
output.writeFieldEnd()
}
if (null != this.bounds) {
output.writeFieldBegin('bounds', Thrift.Type.STRUCT, 9)
this.bounds.write(output)
output.writeFieldEnd()
}
if (null != this.maxInterpretations) {
output.writeFieldBegin('maxInterpretations', Thrift.Type.I32, 10)
output.writeI32(this.maxInterpretations)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

BulkReverseGeocodeRequest = function(args){
this.latlngs = []
this.params = new CommonGeocodeRequestParams()
if( args != null ){if (null != args.latlngs)
this.latlngs = args.latlngs
if (null != args.params)
this.params = args.params
}}
BulkReverseGeocodeRequest.prototype = {}
BulkReverseGeocodeRequest.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.LIST) {
{
var _size154 = 0
var rtmp3
this.latlngs = []
var _etype157 = 0
rtmp3 = input.readListBegin()
_etype157 = rtmp3.etype
_size154 = rtmp3.size
for (var _i158 = 0; _i158 < _size154; ++_i158)
{
var elem159 = null
elem159 = new GeocodePoint()
elem159.read(input)
this.latlngs.push(elem159)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRUCT) {
this.params = new CommonGeocodeRequestParams()
this.params.read(input)
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

BulkReverseGeocodeRequest.prototype.write = function(output){ 
output.writeStructBegin('BulkReverseGeocodeRequest')
if (null != this.latlngs) {
output.writeFieldBegin('latlngs', Thrift.Type.LIST, 1)
{
output.writeListBegin(Thrift.Type.STRUCT, this.latlngs.length)
{
for(var iter160 in this.latlngs)
{
iter160=this.latlngs[iter160]
iter160.write(output)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.params) {
output.writeFieldBegin('params', Thrift.Type.STRUCT, 2)
this.params.write(output)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

BulkReverseGeocodeResponse = function(args){
this.DEPRECATED_interpretationMap = {}
this.interpretations = []
this.interpretationIndexes = []
this.parentFeatures = []
this.debugLines = []
if( args != null ){if (null != args.DEPRECATED_interpretationMap)
this.DEPRECATED_interpretationMap = args.DEPRECATED_interpretationMap
if (null != args.interpretations)
this.interpretations = args.interpretations
if (null != args.interpretationIndexes)
this.interpretationIndexes = args.interpretationIndexes
if (null != args.parentFeatures)
this.parentFeatures = args.parentFeatures
if (null != args.debugLines)
this.debugLines = args.debugLines
}}
BulkReverseGeocodeResponse.prototype = {}
BulkReverseGeocodeResponse.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.MAP) {
{
var _size161 = 0
var rtmp3
this.DEPRECATED_interpretationMap = {}
var _ktype162 = 0
var _vtype163 = 0
rtmp3 = input.readMapBegin()
_ktype162= rtmp3.ktype
_vtype163= rtmp3.vtype
_size161= rtmp3.size
for (var _i165 = 0; _i165 < _size161; ++_i165)
{
key166 = 0
val167 = []
var rtmp = input.readI32()
key166 = rtmp.value
{
var _size168 = 0
var rtmp3
val167 = []
var _etype171 = 0
rtmp3 = input.readListBegin()
_etype171 = rtmp3.etype
_size168 = rtmp3.size
for (var _i172 = 0; _i172 < _size168; ++_i172)
{
var elem173 = null
elem173 = new GeocodeInterpretation()
elem173.read(input)
val167.push(elem173)
}
input.readListEnd()
}
this.DEPRECATED_interpretationMap[key166] = val167
}
input.readMapEnd()
}
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.LIST) {
{
var _size174 = 0
var rtmp3
this.interpretations = []
var _etype177 = 0
rtmp3 = input.readListBegin()
_etype177 = rtmp3.etype
_size174 = rtmp3.size
for (var _i178 = 0; _i178 < _size174; ++_i178)
{
var elem179 = null
elem179 = new GeocodeInterpretation()
elem179.read(input)
this.interpretations.push(elem179)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 4:if (ftype == Thrift.Type.LIST) {
{
var _size180 = 0
var rtmp3
this.interpretationIndexes = []
var _etype183 = 0
rtmp3 = input.readListBegin()
_etype183 = rtmp3.etype
_size180 = rtmp3.size
for (var _i184 = 0; _i184 < _size180; ++_i184)
{
var elem185 = null
{
var _size186 = 0
var rtmp3
elem185 = []
var _etype189 = 0
rtmp3 = input.readListBegin()
_etype189 = rtmp3.etype
_size186 = rtmp3.size
for (var _i190 = 0; _i190 < _size186; ++_i190)
{
var elem191 = null
var rtmp = input.readI32()
elem191 = rtmp.value
elem185.push(elem191)
}
input.readListEnd()
}
this.interpretationIndexes.push(elem185)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 5:if (ftype == Thrift.Type.LIST) {
{
var _size192 = 0
var rtmp3
this.parentFeatures = []
var _etype195 = 0
rtmp3 = input.readListBegin()
_etype195 = rtmp3.etype
_size192 = rtmp3.size
for (var _i196 = 0; _i196 < _size192; ++_i196)
{
var elem197 = null
elem197 = new GeocodeFeature()
elem197.read(input)
this.parentFeatures.push(elem197)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.LIST) {
{
var _size198 = 0
var rtmp3
this.debugLines = []
var _etype201 = 0
rtmp3 = input.readListBegin()
_etype201 = rtmp3.etype
_size198 = rtmp3.size
for (var _i202 = 0; _i202 < _size198; ++_i202)
{
var elem203 = null
var rtmp = input.readString()
elem203 = rtmp.value
this.debugLines.push(elem203)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

BulkReverseGeocodeResponse.prototype.write = function(output){ 
output.writeStructBegin('BulkReverseGeocodeResponse')
if (null != this.DEPRECATED_interpretationMap) {
output.writeFieldBegin('DEPRECATED_interpretationMap', Thrift.Type.MAP, 1)
{
output.writeMapBegin(Thrift.Type.I32, Thrift.Type.LIST, this.DEPRECATED_interpretationMap.length)
{
for(var kiter204 in this.DEPRECATED_interpretationMap){
var viter205 = this.DEPRECATED_interpretationMap[kiter204]
output.writeI32(kiter204)
{
output.writeListBegin(Thrift.Type.STRUCT, viter205.length)
{
for(var iter206 in viter205)
{
iter206=viter205[iter206]
iter206.write(output)
}
}
output.writeListEnd()
}
}
}
output.writeMapEnd()
}
output.writeFieldEnd()
}
if (null != this.interpretations) {
output.writeFieldBegin('interpretations', Thrift.Type.LIST, 3)
{
output.writeListBegin(Thrift.Type.STRUCT, this.interpretations.length)
{
for(var iter207 in this.interpretations)
{
iter207=this.interpretations[iter207]
iter207.write(output)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.interpretationIndexes) {
output.writeFieldBegin('interpretationIndexes', Thrift.Type.LIST, 4)
{
output.writeListBegin(Thrift.Type.LIST, this.interpretationIndexes.length)
{
for(var iter208 in this.interpretationIndexes)
{
iter208=this.interpretationIndexes[iter208]
{
output.writeListBegin(Thrift.Type.I32, iter208.length)
{
for(var iter209 in iter208)
{
iter209=iter208[iter209]
output.writeI32(iter209)
}
}
output.writeListEnd()
}
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.parentFeatures) {
output.writeFieldBegin('parentFeatures', Thrift.Type.LIST, 5)
{
output.writeListBegin(Thrift.Type.STRUCT, this.parentFeatures.length)
{
for(var iter210 in this.parentFeatures)
{
iter210=this.parentFeatures[iter210]
iter210.write(output)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.debugLines) {
output.writeFieldBegin('debugLines', Thrift.Type.LIST, 2)
{
output.writeListBegin(Thrift.Type.STRING, this.debugLines.length)
{
for(var iter211 in this.debugLines)
{
iter211=this.debugLines[iter211]
output.writeString(iter211)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

BulkSlugLookupRequest = function(args){
this.slugs = []
this.params = new CommonGeocodeRequestParams()
if( args != null ){if (null != args.slugs)
this.slugs = args.slugs
if (null != args.params)
this.params = args.params
}}
BulkSlugLookupRequest.prototype = {}
BulkSlugLookupRequest.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.LIST) {
{
var _size212 = 0
var rtmp3
this.slugs = []
var _etype215 = 0
rtmp3 = input.readListBegin()
_etype215 = rtmp3.etype
_size212 = rtmp3.size
for (var _i216 = 0; _i216 < _size212; ++_i216)
{
var elem217 = null
var rtmp = input.readString()
elem217 = rtmp.value
this.slugs.push(elem217)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.STRUCT) {
this.params = new CommonGeocodeRequestParams()
this.params.read(input)
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

BulkSlugLookupRequest.prototype.write = function(output){ 
output.writeStructBegin('BulkSlugLookupRequest')
if (null != this.slugs) {
output.writeFieldBegin('slugs', Thrift.Type.LIST, 1)
{
output.writeListBegin(Thrift.Type.STRING, this.slugs.length)
{
for(var iter218 in this.slugs)
{
iter218=this.slugs[iter218]
output.writeString(iter218)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.params) {
output.writeFieldBegin('params', Thrift.Type.STRUCT, 2)
this.params.write(output)
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

BulkSlugLookupResponse = function(args){
this.interpretations = []
this.interpretationIndexes = []
this.parentFeatures = []
this.debugLines = []
if( args != null ){if (null != args.interpretations)
this.interpretations = args.interpretations
if (null != args.interpretationIndexes)
this.interpretationIndexes = args.interpretationIndexes
if (null != args.parentFeatures)
this.parentFeatures = args.parentFeatures
if (null != args.debugLines)
this.debugLines = args.debugLines
}}
BulkSlugLookupResponse.prototype = {}
BulkSlugLookupResponse.prototype.read = function(input){ 
var ret = input.readStructBegin()
while (1) 
{
var ret = input.readFieldBegin()
var fname = ret.fname
var ftype = ret.ftype
var fid   = ret.fid
if (ftype == Thrift.Type.STOP) 
break
switch(fid)
{
case 1:if (ftype == Thrift.Type.LIST) {
{
var _size219 = 0
var rtmp3
this.interpretations = []
var _etype222 = 0
rtmp3 = input.readListBegin()
_etype222 = rtmp3.etype
_size219 = rtmp3.size
for (var _i223 = 0; _i223 < _size219; ++_i223)
{
var elem224 = null
elem224 = new GeocodeInterpretation()
elem224.read(input)
this.interpretations.push(elem224)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 2:if (ftype == Thrift.Type.LIST) {
{
var _size225 = 0
var rtmp3
this.interpretationIndexes = []
var _etype228 = 0
rtmp3 = input.readListBegin()
_etype228 = rtmp3.etype
_size225 = rtmp3.size
for (var _i229 = 0; _i229 < _size225; ++_i229)
{
var elem230 = null
{
var _size231 = 0
var rtmp3
elem230 = []
var _etype234 = 0
rtmp3 = input.readListBegin()
_etype234 = rtmp3.etype
_size231 = rtmp3.size
for (var _i235 = 0; _i235 < _size231; ++_i235)
{
var elem236 = null
var rtmp = input.readI32()
elem236 = rtmp.value
elem230.push(elem236)
}
input.readListEnd()
}
this.interpretationIndexes.push(elem230)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 4:if (ftype == Thrift.Type.LIST) {
{
var _size237 = 0
var rtmp3
this.parentFeatures = []
var _etype240 = 0
rtmp3 = input.readListBegin()
_etype240 = rtmp3.etype
_size237 = rtmp3.size
for (var _i241 = 0; _i241 < _size237; ++_i241)
{
var elem242 = null
elem242 = new GeocodeFeature()
elem242.read(input)
this.parentFeatures.push(elem242)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
case 3:if (ftype == Thrift.Type.LIST) {
{
var _size243 = 0
var rtmp3
this.debugLines = []
var _etype246 = 0
rtmp3 = input.readListBegin()
_etype246 = rtmp3.etype
_size243 = rtmp3.size
for (var _i247 = 0; _i247 < _size243; ++_i247)
{
var elem248 = null
var rtmp = input.readString()
elem248 = rtmp.value
this.debugLines.push(elem248)
}
input.readListEnd()
}
} else {
  input.skip(ftype)
}
break
default:
  input.skip(ftype)
}
input.readFieldEnd()
}
input.readStructEnd()
return
}

BulkSlugLookupResponse.prototype.write = function(output){ 
output.writeStructBegin('BulkSlugLookupResponse')
if (null != this.interpretations) {
output.writeFieldBegin('interpretations', Thrift.Type.LIST, 1)
{
output.writeListBegin(Thrift.Type.STRUCT, this.interpretations.length)
{
for(var iter249 in this.interpretations)
{
iter249=this.interpretations[iter249]
iter249.write(output)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.interpretationIndexes) {
output.writeFieldBegin('interpretationIndexes', Thrift.Type.LIST, 2)
{
output.writeListBegin(Thrift.Type.LIST, this.interpretationIndexes.length)
{
for(var iter250 in this.interpretationIndexes)
{
iter250=this.interpretationIndexes[iter250]
{
output.writeListBegin(Thrift.Type.I32, iter250.length)
{
for(var iter251 in iter250)
{
iter251=iter250[iter251]
output.writeI32(iter251)
}
}
output.writeListEnd()
}
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.parentFeatures) {
output.writeFieldBegin('parentFeatures', Thrift.Type.LIST, 4)
{
output.writeListBegin(Thrift.Type.STRUCT, this.parentFeatures.length)
{
for(var iter252 in this.parentFeatures)
{
iter252=this.parentFeatures[iter252]
iter252.write(output)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
if (null != this.debugLines) {
output.writeFieldBegin('debugLines', Thrift.Type.LIST, 3)
{
output.writeListBegin(Thrift.Type.STRING, this.debugLines.length)
{
for(var iter253 in this.debugLines)
{
iter253=this.debugLines[iter253]
output.writeString(iter253)
}
}
output.writeListEnd()
}
output.writeFieldEnd()
}
output.writeFieldStop()
output.writeStructEnd()
return
}

